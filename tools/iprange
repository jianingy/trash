#!/usr/bin/env python2
# -*- mode: python -*-
#author: jianingy dot yang at gmail dot com

import re
import math
from exceptions import ValueError


class IPv4AddressError(Exception):
    pass


class IPv4Subnet(object):

    def __init__(self, net, mask):
        self._net = net
        self._mask = mask

    def __iter__(self):
        in_addr = self._net
        while in_addr & self._mask == self._net:
            yield IPv4Address(in_addr, self._mask)
            in_addr = in_addr + 1

    def __contains__(self, s_addr):
        addr = IPv4Address(s_addr)
        if addr._addr & self._mask == self._net:
            return True
        return False


class IPv4Address(object):

    netmask_all = dict([((2 ** i - 1) << (32 - i), i) for i in range(0, 33)])
    re_range = re.compile("([^-]+)-(.+)")

    def __init__(self, *argv):

        if len(argv) == 2:
            # construct from numerical address and netmask
            self._addr = argv[0]
            self._mask = argv[1]
        elif isinstance(argv[0], IPv4Address):
            # construct from another IPv4Address object
            self._addr = argv[0]._addr
            self._mask = argv[0]._mask
        else:
            # construct from string
            s_addr = argv[0].strip().split('/', 1)
            if len(s_addr) == 1:
                # One IP subnet
                self._addr = IPv4Address.to_int(s_addr[0])
                self._mask = 0xFFFFFFFF
            else:
                self._addr = IPv4Address.to_int(s_addr[0])
                if len(s_addr[1]) > 2:
                    # Netmask Address
                    self._mask = IPv4Address.to_int(s_addr[1])
                else:
                    # CIDR Address
                    self._mask = 0xFFFFFFFF ^ (0xFFFFFFFF >> int(s_addr[1]))

        # validate netmask
        #if ((~self._mask + 1) & (~self._mask)) & 0xFFFFFFFF:
        #    raise IPv4AddressError('Invalid netmask value')

        # validate data
        if self._addr & 0xFFFFFFFF != self._addr:
            raise IPv4Address('Invalid address value')

        if self._mask not in self.netmask_all:
            raise IPv4AddressError('Invalid netmask value')

        self._subnet = self._addr & self._mask

    @classmethod
    def to_int(cls, s_addr):

        def _int(x):
            try:
                x = int(x)
                if not x & 0xFF == x:
                    raise IPv4AddressError('Invalid IP Address')
                return x
            except ValueError:
                raise IPv4AddressError('Invalid IP Address')

        return reduce(lambda x, y: y | (x << 8), map(_int, s_addr.split('.')))

    @classmethod
    def to_addr(cls, in_addr):
        s_addr = []
        for i in range(0, 4):
            s_addr.append(str(in_addr & 0xFF))
            in_addr = in_addr >> 8
        return '.'.join(reversed(s_addr))

    def address(self):
        return IPv4Address.to_addr(self._addr)

    def netmask(self, netmask=False):
        if netmask:
            return IPv4Address.to_addr(self._mask)
        return self.netmask_all[self._mask]

    def net(self):
        return IPv4Address.to_addr(self._subnet)

    def subnet(self):
        return IPv4Subnet(self._subnet, self._mask)

    @classmethod
    def expand_range(cls, exprs):

        def _reduce_range(x, y):
            x.extend(y)
            return x

        def _expand_range(expr):
            match = cls.re_range.match(expr)
            if not match:
                return [expr]
            start, end = cls.to_int(match.group(1)), cls.to_int(match.group(2))
            return map(cls.to_addr, range(start, end + 1))

        ip_ints = map(_expand_range, exprs)
        if not ip_ints:
            return []

        return reduce(_reduce_range, ip_ints)

    @classmethod
    def compress(cls, ips):
        # expand all ip addresses
        pool = set()
        for s_addr in ips:
            for ip in IPv4Address(s_addr).subnet():
                pool.add(ip)
        queue = list(pool)
        if not queue:
            return []
        # sort in reverse order
        queue.sort(cmp=lambda x, y: (-1, 1)[x._addr < y._addr])

        # compress
        compressed = []
        while queue:
            base = queue.pop()

            # find the size of the subnet
            subnet_size = 0
            while (base._addr ==
                   (base._addr & (0xFFFFFFFF << (subnet_size + 1)))):
                subnet_size = subnet_size + 1

            # find the real size of addresses
            capacity = 1
            for ip in reversed(queue):
                if ip._addr != base._addr + capacity:
                    break
                if capacity > 2 ** subnet_size - 1:
                    break
                capacity = capacity + 1

            if capacity > 0:
                exponent = int(math.log(capacity, 2))
                remain = 2 ** exponent - 1

            while queue and remain:
                queue.pop()
                remain = remain - 1

            compressed.append(
                IPv4Address(base._addr, (0xFFFFFFFF >> exponent) << exponent))

        return compressed

    def __repr__(self):
        return '<IPv4Address: %s/%s>' % (self.address(), self.netmask(True))

    def __str__(self):
        return '%s/%s' % (self.address(), self.netmask(True))

    def __unicode__(self):
        return unicode(self.__str__())


def print_help_message():
    print "usage: iprange [OPTIONS] IP0 IP1 ..."
    print "compress / expand ipv4 addresses"
    print "OPTIONS: "
    print "    -h|--help                  help message"
    print "    -c                         do compression"
    print "    -x                         do expansion"
    print "    -t netmask/cidr            output format"
    print
    print "IP Address Syntax:"
    print "   * CIDR format    : 192.168.1.0/24; or"
    print "   * NETMASK format : 192.168.1.0/255.255.255.0; or"
    print "   * Range format   : 192.168.1.0-192.168.2.200"
    print
    print "Bug report to jianingy dot yang at gmail dot com"

if __name__ == '__main__':
    from getopt import getopt, GetoptError
    import sys

    try:
        opts, args = getopt(sys.argv[1:], 'cht:x', ['help'])
    except GetoptError, e:
        print_help_message()
        sys.exit(1)

    opt_netmask_form = False
    opt_mission = ''

    for name, value in opts:
        if name == '-t':
            opt_netmask_form = (value.lower() == 'netmask')
        else:
            opt_mission = name

    if opt_mission in ('-h', '--help'):
        print_help_message()
        sys.exit(0)

    if len(args) == 0:
        args = sys.stdin.readlines()

    ips = IPv4Address.expand_range(args)

    if opt_mission == '-x':
        for s_addr in ips:
            for ip in IPv4Address(s_addr).subnet():
                print ip.address()
    elif opt_mission == '-c':
        for ip in IPv4Address.compress(ips):
            print ip.address() + "/" + str(ip.netmask(opt_netmask_form))
    else:
        for s_addr in ips:
            ip = IPv4Address(s_addr)
            print ip.address() + "/" + str(ip.netmask(opt_netmask_form))

    sys.exit(0)
